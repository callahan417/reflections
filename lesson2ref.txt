What happens when you initialize a repository? Why do you need to do it?
When a repository is initializes with the command 'git init', Git creates a directory called .git.  This new directory will store metadata about all of the versions of tracked files that will be committed. (Files that the user wishes to track must be added to the staging area using the command 'git add <filename>'.) The .git directory is necessary to maintain a dynamic record of the evolution of the files in the repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area contains files (i.e. tracked files) that are currently being edited and will be committed next (a little like being on deck in baseball), while the working directory contains untracked files (a little like being in the dugout in baseball). (A commit would be a little like and at bat in baseball.) The staging area is valuable to conceptually and operationally separate tracked files from untracked files.

How can you use the staging area to make sure you have one commit per logical change?
Git add only those files that are related to a single logical change, then commit those altered files.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
1) Creating an experimental change/feature --> having it on a separate brach would protect the original if the experiment fails or is not as good.
2) Creating an alternate version (e.g. easier, harder, foreign language, colorblind, mobile?, 3D) --> Using a separate branch would allow for freedom to make the changes and the different versions could be merged at a later date with menu choices for selecting the alternates.

How do the diagrams help you visualize the branch structure?
The diagrams show each of the branches an where they connect to each other.  They also show the parent-child relationship for each commit.  This provides a comprehensive picture of the branch structure and the commit/branch relationships.