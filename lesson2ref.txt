What happens when you initialize a repository? Why do you need to do it?
When a repository is initializes with the command 'git init', Git creates a directory called .git.  This new directory will store metadata about all of the versions of tracked files that will be committed. (Files that the user wishes to track must be added to the staging area using the command 'git add <filename>'.) The .git directory is necessary to maintain a dynamic record of the evolution of the files in the repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area contains files that will be committed next (a little like being on deck in baseball), while the working directory contains other tracked files (a little like being on the roster in baseball). (A commit would be a little like an at bat in baseball.) The staging area is valuable to conceptually and operationally separate files to be included in a commit from files that will not be included (e.g. files that have not been edited recently.)

How can you use the staging area to make sure you have one commit per logical change?
Git add only those files that are related to a single logical change, then commit those altered files.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
1) Creating an experimental change/feature --> having it on a separate brach would protect the original if the experiment fails or is not as good.
2) Creating an alternate version (e.g. easier, harder, foreign language, colorblind, mobile?, 3D) --> Using a separate branch would allow for freedom to make the changes and the different versions could be merged at a later date with menu choices for selecting the alternates.

How do the diagrams help you visualize the branch structure?
The diagrams show each of the branches an where they connect to each other.  They also show the parent-child relationship for each commit.  This provides a comprehensive picture of the branch structure and the commit/branch relationships.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging two branches results in a single branch that contains all of the commits from each separate branch. These commits are shown in order based on the time at which they were created. The merger also creates a new commit in which each file is a combination of the respective versions from each branch, based on a comparison between the most recent versions and the last versions that existed before the branching.  The diagrammatic representation shows the commits from each branch on separate branches that merge back into one to make it clear where each commit came from and shows that the most recent commit is labeled with the name of the branch that was merged into.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Pros: Automatic merging is less work and the developer doesn't have to think about it. The process SHOULD usually result in a workable version that combines changes from different developers.
Cons: Automatic merging could result in lines of code included in a merged version of a file that shouldn't be there and could introduce bugs when changes from different users are combined.  It doesn't catch mistakes made by programmers. Manual merging alows for review of code before committing the merge.